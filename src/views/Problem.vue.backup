<template>
  <div class="m-6 flex flex-col gap-6 max-w-6xl mx-auto">
    <div class="flex flex-col space-y-2 sm:space-y-4 md:space-y-6 lg:flex-row lg:space-x-6 lg:space-y-0" v-auto-animate>
      <div class="flex flex-row space-x-2 sm:space-x-4 md:space-x-6 lg:flex-col lg:space-x-0 lg:space-y-6 mx-auto">
        <div class="card shadow-lg Border bg-white p-4 sm:p-6 w-72 h-fit" v-if="contest.CID || problemList.LID">
          <div class="text-lg space-x-2 space-y-2" v-if="contest.CID">
            <span>
              #{{ contest.CID }}
            </span>
            <span class="font-bold">
              {{ contest.Title }}
            </span>
          </div>
          <div>
            <progress class="progress w-full"
              :value="ConvertTools.Percentage(Math.min(contest.Duration, contest.TimeNow - contest.BeginTime), contest.Duration)"
              max="100" v-if="contest.CID">
            </progress>
          </div>
          <div class="text-lg space-x-2" v-if="problemList.LID">
            <span>
              #{{ problemList.LID }}
            </span>
            <span class="font-bold">
              {{ problemList.Title }}
            </span>
          </div>
          <div class="flex gap-2 pt-2 flex-wrap [&_div_button]:w-10">
            <div class="group/dropdown" v-for="(item, index) in problems" :key="item.PID">
              <button tabindex="0" role="button" class="btn w-full group-hover/dropdown"
                :class="{ 'btn-active': item.PID == problem.PID }"
                @click="$router.replace({
                  name: 'Problem',
                  params: {
                    PID: item.PID,
                    BindID: contest.CID ? 'C' + contest.CID : 'L' + problemList.LID,
                  },
                })">
                {{ ConvertTools.Number2Alpha(index + 1) }}
              </button>
              <div tabindex="0"
                class="z-[1] card card-compact w-64 shadow bg-white Border group-hover/dropdown:block hidden absolute mt-3 right-1 backdrop-blur-md bg-opacity-60">
                <div class="card-body">
                  <h3 class="card-title">
                    <div class="text-lg space-x-2 font-normal">
                      <span>
                        {{ item.PID }}
                      </span>
                      <span class="font-bold">
                        {{ item.Title }}
                      </span>
                    </div>
                  </h3>
                  <p>
                    AC 率
                    <progress class="progress progress-success w-20 mx-2"
                      :value="ConvertTools.Percentage(item.ACNum, item.SubmitNum)" max="100"></progress>
                    {{ item.ACNum }} / {{ item.SubmitNum }}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="card shadow-lg bg-white Border p-4 sm:p-6 w-72 h-fit flex space-y-2">
          <div class="text-lg space-x-2">
            <span>
              {{ problem.PID }}
            </span>
            <span class="font-bold">
              {{ problem.Title }}
            </span>
          </div>
          <div class="grid grid-cols-2 gap-2">
            <div class="flex badge badge-neutral badge-lg w-full rounded-lg h-8 whitespace-nowrap">
              <stopwatch-start theme="outline" size="17" fill="#fff" />
              &nbsp;{{ problem.LimitTime }} ms
            </div>
            <div class="flex badge badge-neutral badge-lg w-full rounded-lg h-8 whitespace-nowrap">
              <disk theme="outline" size="16" fill="#fff" />
              &nbsp;{{ problem.LimitMemory }} MB
            </div>
          </div>
          <div class="collapse bg-base-200 collapse-arrow rounded-lg">
            <input type="checkbox" />
            <div class="collapse-title text-md font-bold whitespace-nowrap">
              <span>题目标签</span>
              <div class="badge badge-neutral badge-md ml-2">
                {{ problem.Label == '' ? 0 : problem.Label.split(/;| /).length }}
              </div>
            </div>
            <div class="collapse-content [&_span]:mr-1">
              <span class="badge badge-neutral badge-md" v-for="(label, index) in problem.Label.split(/;| /)" :key="index"
                v-if="problem.Label != ''">
                {{ label }}
              </span>
            </div>
          </div>
          <button class="btn btn-success" onclick="codeModal.showModal()">
            <check theme="outline" size="20" />
            <div class="text-base">
              提 交
            </div>
          </button>
        </div>
      </div>
      <div class="space-y-6 w-full" v-auto-animate>
        <div class="flex justify-between space-x-6">
          <ul class="menu bg-white flex flex-row rounded-box Border shadow-lg text-base font-bold w-fit">
            <li>
              <a @click="$router.replace({ name: 'ProblemDescription' })"
                :class="{ 'btn-active': route.name == 'ProblemDescription' }">
                <word theme="outline" size="18" />
                题面
              </a>
            </li>
            <li>
              <a @click="$router.replace({ name: 'ProblemRecords' })"
                :class="{ 'btn-active': route.name == 'ProblemRecords' }">
                <history theme="outline" size="18" />
                记录
                <div class="badge badge-neutral badge-md">{{ problem.RecordNumber }}</div>
              </a>
            </li>
            <li>
              <a @click="$router.replace({ name: 'ProblemDiscussions' })"
                :class="{ 'btn-active': route.name == 'ProblemDiscussions' }">
                <topic theme="outline" size="18" />
                讨论
                <div class="badge badge-neutral badge-md">{{ problem.SolutionNumber }}</div>
              </a>
            </li>
          </ul>
          <ul class="menu bg-white flex flex-row rounded-box Border shadow-lg text-base font-bold w-fit"
            v-if="userDataStore.PermissionMap & constValStore.ContestAdminBit">
            <li>
              <a @click="$router.push({
                name: 'EditProblem',
                params: {
                  PID: problem.PID,
                },
              })" class="whitespace-nowrap">
                <editor theme="outline" size="18" />
                题目编辑
              </a>
            </li>
            <li>
              <a @click="$router.push({
                name: 'ProblemData',
                params: {
                  PID: problem.PID,
                },
              })" class="whitespace-nowrap">
                <ICONdata theme="outline" size="18" />
                数据编辑
              </a>
            </li>
          </ul>
        </div>
        <RouterView :problem="problem"></RouterView>
      </div>
    </div>
  </div>
  <dialog id="codeModal" class="modal">
    <div class="modal-box max-w-3xl">
      <h3 class="font-bold text-lg pb-6">{{ problem.PID }} {{ problem.Title }}</h3>
      <select class="select select-bordered w-72 max-w-xs text-base" v-model="submit.Lang">
        <option v-for="item in submitLanguageOptions" :value="item.value" :key="item.value">
          {{ item.name }} ({{ item.compiler }})
        </option>
      </select>
      <textarea class="textarea textarea-bordered w-full h-[340px] mt-4" placeholder=""
        v-model="submit.Source"></textarea>
      <div class="modal-action">
        <form method="dialog">
          <button class="btn mr-2">暂存并退出</button>
          <button class="btn btn-neutral"
            @click="problem.submitCode != undefined ? problem.submitCode() : 0">提交代码</button>
        </form>
      </div>
    </div>
  </dialog>
</template>

<script lang="ts" setup name="Problem">
import { onMounted, reactive, ref, watch } from 'vue';
import { useRoute, useRouter } from 'vue-router';

import { Check, Disk, Editor, History, Data as ICONdata, StopwatchStart, Topic, Word } from '@icon-park/vue-next';
import { push } from 'notivue';

import { _getContest } from '@/apis/contest';
import { _getProblem, _submitCode } from '@/apis/problem';
import { _getProblemList } from '@/apis/problemList';
import { _getRecords } from '@/apis/record';
import { submitLanguageOptions } from '@/config';
import { type ContestType } from '@/interfaces/contest';
import { type ProblemType } from '@/interfaces/problem';
import { ProblemListType } from '@/interfaces/problemList';
import { type SubmitCodeType } from '@/interfaces/record';
import { useConstValStore } from '@/stores/ConstVal';
import { useUserDataStore } from '@/stores/UserData';
import { ConvertTools, getServerTime } from '@/utils/globalFunctions';

const userDataStore = useUserDataStore();
const constValStore = useConstValStore();
const router = useRouter();
const route = useRoute();

let submit = ref<SubmitCodeType>({
  Lang: 4,
  Source: '',
});

let contest = reactive<ContestType>({
  CID: 0,
  BeginTime: 0,
  EndTime: 0,
  IsPublic: 0,
  Size: 0,
  Title: '',
  Duration: 0,
  Description: '',
  Problems: '',
  UID: '',
  Type: 0,
  Pass: '',
  content: '',
  TimeNow: 0,
  Status: 0,

  get() {
    if (this.CID == 0) return;
    _getContest({}, this.CID)
      .then((data: any) => {
        this.Title = data.Title;
        this.BeginTime = data.BeginTime;
        this.EndTime = data.EndTime;
        this.Duration = ConvertTools.TimeInterval(this.BeginTime, this.EndTime);
        this.CID = data.CID;
        this.IsPublic = data.IsPublic;
        problems = data.Data;
        push.success({
          title: '同步成功',
          message: `已同步竞赛 #${this.CID}`,
        })
      })
  },

  goToProblem(PID: string) {
    router.replace(`/problem/${PID}/C${this.CID}`);
    problem.PID = PID;
  },
})

let problemList = reactive<ProblemListType>({
  CID: 0,
  IsPublic: 0,
  Size: 0,
  Title: '',
  Description: '',
  Problems: '',
  UID: '',
  Type: 0,
  Pass: '',
  content: '',

  get() {
    if (this.LID == 0) return;
    _getProblemList({}, this.LID)
      .then((data: any) => {
        this.Title = data.Title;
        this.BeginTime = data.BeginTime;
        this.EndTime = data.EndTime;
        this.Duration = ConvertTools.TimeInterval(this.BeginTime, this.EndTime);
        this.LID = data.LID;
        this.IsPublic = data.IsPublic;
        problems = data.Data;
        push.success({
          title: '同步成功',
          message: `已同步题单 #${this.LID}`,
        })
      })
  },
})

let problem = reactive<ProblemType>({
  PID: '',
  Title: '',
  Label: '',
  Visible: 0,
  Submit: 0,
  Accepted: 0,
  Description: '',
  Origin: -1,
  OriginPID: '',
  LimitMemory: 0,
  LimitTime: 0,
  SolutionNumber: 0,
  ContentType: 1,
  Input: '',
  Output: '',
  SampleInput: '',
  SampleOutput: '',
  Hit: '',
  PType: '',

  RecordNumber: 0,

  get() {
    _getProblem({}, problem.PID)
      .then((data: any) => {
        this.Accepted = data.Accepted;
        this.ContestType = data.ContestType;
        this.Description = data.Description;
        this.Title = data.Title;
        this.Label = data.Label;
        this.LimitMemory = data.LimitMemory;
        this.LimitTime = data.LimitTime;
        this.ContentType = data.ContentType;
        this.SolutionNumber = data.SolutionNumber;
        this.SampleInput = data.SampleInput;
        this.SampleOutput = data.SampleOutput;
        this.Input = data.Input;
        this.Output = data.Output;
        this.Hit = data.Hit;
        this.PType = data.PType;
        this.Origin = data.Origin;
        this.OriginPID = data.OriginPID;
        this.content = this.convertToMarkdown();
      })
      .then(() => {
        if (this.ContentType == constValStore.PROBLEM_CONTENTTYPE_PDF) {
          push.info({
            title: '提示',
            message: '题面为 PDF 格式，请点击下载按钮下载',
          })
        }
      })
  },

  getRecordNumber() {
    let params = {
      PID: this.PID,
      Limit: 1,
    }
    _getRecords(params)
      .then((data: any) => {
        this.RecordNumber = data.Count;
      })
  },

  submitCode() {
    if (submit.value.Source == "") {
      push.warning({
        title: '提交失败',
        message: '代码不能为空',
      })
      return;
    }
    let params = {
      PID: problem.PID,
      UID: userDataStore.UID,
      CID: contest.CID ? contest.CID : -1,
      LID: problemList.LID ? problemList.LID : -1,
      Source: submit.value.Source,
      Lang: +submit.value.Lang,
      // OnlineJudging: false,
      // SubmitTime: Date.now(),
      // Input: ''
    }
    if (params.Lang == 5 && (userDataStore.PermissionMap & constValStore.SuperAdminBit) == 0) {
      push.warning({
        title: '提交失败',
        message: '暂不支持 Java 语言提交',
      })
      return;
    }
    _submitCode(params)
      .then((data: any) => {
        push.success({
          title: '提交成功',
          message: '已提交代码',
        })
        router.push({
          name: 'Record',
          params: {
            SID: data.SID,
          },
        });
      })
  },

  convertToMarkdown(): string {
    let res = "";
    if (problem.Description) {
      res += "## 题目描述\n\n";
      res += problem.Description;
    }
    if (problem.Input) {
      res += "\n\n## 输入格式\n\n";
      res += problem.Input;
    }
    if (problem.Output) {
      res += "\n\n## 输出格式\n\n";
      res += problem.Output;
    }
    if (problem.SampleInput) {
      res += "\n\n## 样例输入\n\n";
      res += "```\n\n" + problem.SampleInput + "\n\n```";
    }
    if (problem.SampleOutput) {
      res += "\n\n## 样例输出\n\n";
      res += "```\n\n" + problem.SampleOutput + "\n\n```";
    }
    return res;
  }
})

interface problems {
  PID: string,
  Title: string,
  SubmitNum: number,
  ACNum: number,
}

let problems = reactive<Array<problems>>([]);

function syncUrl() {
  problem.PID = route.params.PID as string;
  if (route.params.BindID) {
    let bindID = route.params.BindID as string;
    if (bindID.startsWith("C")) {
      contest.CID = +bindID.substring(1);
      contest.get();
      getServerTime()
        .then((res: any) => {
          contest.TimeNow = res;
        })
    } else if (bindID.startsWith("L")) {
      problemList.LID = +bindID.substring(1);
      problemList.get();
    }
  }
}

onMounted(() => {
  syncUrl();
  problem.get();
  problem.getRecordNumber();
})

watch(() => route.params.PID, () => {
  problem.PID = route.params.PID as string;
  problem.get();
  problem.getRecordNumber();
})

</script>